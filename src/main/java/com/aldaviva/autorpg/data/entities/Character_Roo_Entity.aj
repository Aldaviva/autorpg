// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.aldaviva.autorpg.data.entities;

import com.aldaviva.autorpg.data.entities.Character;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Version;
import org.springframework.transaction.annotation.Transactional;

privileged aspect Character_Roo_Entity {
    
    @PersistenceContext
    transient EntityManager Character.entityManager;
    
    @Version
    @Column(name = "version")
    private Integer Character.version;
    
    public Integer Character.getVersion() {
        return this.version;
    }
    
    public void Character.setVersion(Integer version) {
        this.version = version;
    }
    
    @Transactional
    public void Character.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void Character.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            Character attached = this.entityManager.find(this.getClass(), this.name);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void Character.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public Character Character.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Character merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
    public static final EntityManager Character.entityManager() {
        EntityManager em = new Character().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long Character.countCharacters() {
        return entityManager().createQuery("select count(o) from Character o", Long.class).getSingleResult();
    }
    
    public static List<Character> Character.findAllCharacters() {
        return entityManager().createQuery("select o from Character o", Character.class).getResultList();
    }
    
    public static Character Character.findCharacter(String id) {
        if (id == null || 0 == id.length()) return null;
        return entityManager().find(Character.class, id);
    }
    
    public static List<Character> Character.findCharacterEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("select o from Character o", Character.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
}
